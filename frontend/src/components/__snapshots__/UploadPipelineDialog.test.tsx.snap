// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`UploadPipelineDialog renders alternate UI for uploading via URL 1`] = `
<WithStyles(Dialog)
  classes={
    Object {
      "paper": "root",
    }
  }
  id="uploadDialog"
  onClose={[Function]}
  open={false}
>
  <WithStyles(DialogTitle) />
  <div
    className=""
  >
    <div
      className="flex"
    >
      <WithStyles(WithFormControlContext(FormControlLabel))
        checked={false}
        control={
          <WithStyles(Radio)
            color="primary"
          />
        }
        id="uploadLocalFileBtn"
        label=""
        onChange={[Function]}
      />
      <WithStyles(WithFormControlContext(FormControlLabel))
        checked={true}
        control={
          <WithStyles(Radio)
            color="primary"
          />
        }
        id="uploadFromUrlBtn"
        label=""
        onChange={[Function]}
      />
    </div>
    <div
      className=""
    />
    <DocumentationCompilePipeline />
    <Input
      label=""
      onChange={[Function]}
      required={true}
      value=""
      variant="outlined"
    />
    <Input
      id="uploadFileName"
      label=""
      onChange={[Function]}
      required={true}
      value=""
      variant="outlined"
    />
  </div>
  <WithStyles(DialogActions)>
    <WithStyles(Button)
      id="cancelUploadBtn"
      onClick={[Function]}
    />
    <BusyButton
      busy={false}
      disabled={true}
      id="confirmUploadBtn"
      onClick={[Function]}
      title=""
    />
  </WithStyles(DialogActions)>
</WithStyles(Dialog)>
`;

exports[`UploadPipelineDialog renders an active dropzone 1`] = `
<WithStyles(Dialog)
  classes={
    Object {
      "paper": "root",
    }
  }
  id="uploadDialog"
  onClose={[Function]}
  open={false}
>
  <WithStyles(DialogTitle) />
  <div
    className=""
  >
    <div
      className="flex"
    >
      <WithStyles(WithFormControlContext(FormControlLabel))
        checked={true}
        control={
          <WithStyles(Radio)
            color="primary"
          />
        }
        id="uploadLocalFileBtn"
        label=""
        onChange={[Function]}
      />
      <WithStyles(WithFormControlContext(FormControlLabel))
        checked={false}
        control={
          <WithStyles(Radio)
            color="primary"
          />
        }
        id="uploadFromUrlBtn"
        label=""
        onChange={[Function]}
      />
    </div>
    <n
      disableClick={true}
      disablePreview={false}
      disabled={false}
      getDataTransferItems={[Function]}
      id="dropZone"
      inputProps={
        Object {
          "tabIndex": -1,
        }
      }
      maxSize={Infinity}
      minSize={0}
      multiple={true}
      onDragEnter={[Function]}
      onDragLeave={[Function]}
      onDrop={[Function]}
      preventDropOnDocument={true}
      style={
        Object {
          "position": "relative",
        }
      }
    >
      <div
        className="dropOverlay"
      />
      <div
        className=""
      >
        <br />
      </div>
      <DocumentationCompilePipeline />
      <Input
        InputProps={
          Object {
            "endAdornment": <WithStyles(InputAdornment)
              position="end"
            >
              <WithStyles(Button)
                color="secondary"
                onClick={[Function]}
                style={
                  Object {
                    "margin": 0,
                    "padding": "3px 5px",
                    "whiteSpace": "nowrap",
                  }
                }
              >
                
              </WithStyles(Button)>
            </WithStyles(InputAdornment)>,
            "readOnly": true,
          }
        }
        label=""
        onChange={[Function]}
        required={true}
        value=""
        variant="outlined"
      />
    </n>
    <Input
      id="uploadFileName"
      label=""
      onChange={[Function]}
      required={true}
      value=""
      variant="outlined"
    />
  </div>
  <WithStyles(DialogActions)>
    <WithStyles(Button)
      id="cancelUploadBtn"
      onClick={[Function]}
    />
    <BusyButton
      busy={false}
      disabled={true}
      id="confirmUploadBtn"
      onClick={[Function]}
      title=""
    />
  </WithStyles(DialogActions)>
</WithStyles(Dialog)>
`;

exports[`UploadPipelineDialog renders closed 1`] = `
<WithStyles(Dialog)
  classes={
    Object {
      "paper": "root",
    }
  }
  id="uploadDialog"
  onClose={[Function]}
  open={false}
>
  <WithStyles(DialogTitle) />
  <div
    className=""
  >
    <div
      className="flex"
    >
      <WithStyles(WithFormControlContext(FormControlLabel))
        checked={true}
        control={
          <WithStyles(Radio)
            color="primary"
          />
        }
        id="uploadLocalFileBtn"
        label=""
        onChange={[Function]}
      />
      <WithStyles(WithFormControlContext(FormControlLabel))
        checked={false}
        control={
          <WithStyles(Radio)
            color="primary"
          />
        }
        id="uploadFromUrlBtn"
        label=""
        onChange={[Function]}
      />
    </div>
    <n
      disableClick={true}
      disablePreview={false}
      disabled={false}
      getDataTransferItems={[Function]}
      id="dropZone"
      inputProps={
        Object {
          "tabIndex": -1,
        }
      }
      maxSize={Infinity}
      minSize={0}
      multiple={true}
      onDragEnter={[Function]}
      onDragLeave={[Function]}
      onDrop={[Function]}
      preventDropOnDocument={true}
      style={
        Object {
          "position": "relative",
        }
      }
    >
      <div
        className=""
      >
        <br />
      </div>
      <DocumentationCompilePipeline />
      <Input
        InputProps={
          Object {
            "endAdornment": <WithStyles(InputAdornment)
              position="end"
            >
              <WithStyles(Button)
                color="secondary"
                onClick={[Function]}
                style={
                  Object {
                    "margin": 0,
                    "padding": "3px 5px",
                    "whiteSpace": "nowrap",
                  }
                }
              >
                
              </WithStyles(Button)>
            </WithStyles(InputAdornment)>,
            "readOnly": true,
          }
        }
        label=""
        onChange={[Function]}
        required={true}
        value=""
        variant="outlined"
      />
    </n>
    <Input
      id="uploadFileName"
      label=""
      onChange={[Function]}
      required={true}
      value=""
      variant="outlined"
    />
  </div>
  <WithStyles(DialogActions)>
    <WithStyles(Button)
      id="cancelUploadBtn"
      onClick={[Function]}
    />
    <BusyButton
      busy={false}
      disabled={true}
      id="confirmUploadBtn"
      onClick={[Function]}
      title=""
    />
  </WithStyles(DialogActions)>
</WithStyles(Dialog)>
`;

exports[`UploadPipelineDialog renders open 1`] = `
<WithStyles(Dialog)
  classes={
    Object {
      "paper": "root",
    }
  }
  id="uploadDialog"
  onClose={[Function]}
  open={false}
>
  <WithStyles(DialogTitle) />
  <div
    className=""
  >
    <div
      className="flex"
    >
      <WithStyles(WithFormControlContext(FormControlLabel))
        checked={true}
        control={
          <WithStyles(Radio)
            color="primary"
          />
        }
        id="uploadLocalFileBtn"
        label=""
        onChange={[Function]}
      />
      <WithStyles(WithFormControlContext(FormControlLabel))
        checked={false}
        control={
          <WithStyles(Radio)
            color="primary"
          />
        }
        id="uploadFromUrlBtn"
        label=""
        onChange={[Function]}
      />
    </div>
    <n
      disableClick={true}
      disablePreview={false}
      disabled={false}
      getDataTransferItems={[Function]}
      id="dropZone"
      inputProps={
        Object {
          "tabIndex": -1,
        }
      }
      maxSize={Infinity}
      minSize={0}
      multiple={true}
      onDragEnter={[Function]}
      onDragLeave={[Function]}
      onDrop={[Function]}
      preventDropOnDocument={true}
      style={
        Object {
          "position": "relative",
        }
      }
    >
      <div
        className=""
      >
        <br />
      </div>
      <DocumentationCompilePipeline />
      <Input
        InputProps={
          Object {
            "endAdornment": <WithStyles(InputAdornment)
              position="end"
            >
              <WithStyles(Button)
                color="secondary"
                onClick={[Function]}
                style={
                  Object {
                    "margin": 0,
                    "padding": "3px 5px",
                    "whiteSpace": "nowrap",
                  }
                }
              >
                
              </WithStyles(Button)>
            </WithStyles(InputAdornment)>,
            "readOnly": true,
          }
        }
        label=""
        onChange={[Function]}
        required={true}
        value=""
        variant="outlined"
      />
    </n>
    <Input
      id="uploadFileName"
      label=""
      onChange={[Function]}
      required={true}
      value=""
      variant="outlined"
    />
  </div>
  <WithStyles(DialogActions)>
    <WithStyles(Button)
      id="cancelUploadBtn"
      onClick={[Function]}
    />
    <BusyButton
      busy={false}
      disabled={true}
      id="confirmUploadBtn"
      onClick={[Function]}
      title=""
    />
  </WithStyles(DialogActions)>
</WithStyles(Dialog)>
`;

exports[`UploadPipelineDialog renders with a selected file to upload 1`] = `
<WithStyles(Dialog)
  classes={
    Object {
      "paper": "root",
    }
  }
  id="uploadDialog"
  onClose={[Function]}
  open={false}
>
  <WithStyles(DialogTitle) />
  <div
    className=""
  >
    <div
      className="flex"
    >
      <WithStyles(WithFormControlContext(FormControlLabel))
        checked={true}
        control={
          <WithStyles(Radio)
            color="primary"
          />
        }
        id="uploadLocalFileBtn"
        label=""
        onChange={[Function]}
      />
      <WithStyles(WithFormControlContext(FormControlLabel))
        checked={false}
        control={
          <WithStyles(Radio)
            color="primary"
          />
        }
        id="uploadFromUrlBtn"
        label=""
        onChange={[Function]}
      />
    </div>
    <n
      disableClick={true}
      disablePreview={false}
      disabled={false}
      getDataTransferItems={[Function]}
      id="dropZone"
      inputProps={
        Object {
          "tabIndex": -1,
        }
      }
      maxSize={Infinity}
      minSize={0}
      multiple={true}
      onDragEnter={[Function]}
      onDragLeave={[Function]}
      onDrop={[Function]}
      preventDropOnDocument={true}
      style={
        Object {
          "position": "relative",
        }
      }
    >
      <div
        className=""
      >
        <br />
      </div>
      <DocumentationCompilePipeline />
      <Input
        InputProps={
          Object {
            "endAdornment": <WithStyles(InputAdornment)
              position="end"
            >
              <WithStyles(Button)
                color="secondary"
                onClick={[Function]}
                style={
                  Object {
                    "margin": 0,
                    "padding": "3px 5px",
                    "whiteSpace": "nowrap",
                  }
                }
              >
                
              </WithStyles(Button)>
            </WithStyles(InputAdornment)>,
            "readOnly": true,
          }
        }
        label=""
        onChange={[Function]}
        required={true}
        value=""
        variant="outlined"
      />
    </n>
    <Input
      id="uploadFileName"
      label=""
      onChange={[Function]}
      required={true}
      value=""
      variant="outlined"
    />
  </div>
  <WithStyles(DialogActions)>
    <WithStyles(Button)
      id="cancelUploadBtn"
      onClick={[Function]}
    />
    <BusyButton
      busy={false}
      disabled={true}
      id="confirmUploadBtn"
      onClick={[Function]}
      title=""
    />
  </WithStyles(DialogActions)>
</WithStyles(Dialog)>
`;
